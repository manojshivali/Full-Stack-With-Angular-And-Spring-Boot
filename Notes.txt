Pushing code to git:
1. Create new repository in Git: Full-Stack-With-Angular-And-Spring-Boot
2. 
meesa@DESKTOP-O9RGIR5 MINGW64 /c/MJ/Full-Stack-With-Angular-And-Spring-Boot
git config --global user.name manojshivali
git config --global user.email "manoj25552@gmail.com"
touch .gitignore
git init
git add .
git commit -m "Full-Stack-With-Angular-And-Spring-Boot"
git status
git remote add origin git@github.com:manojshivali/Full-Stack-With-Angular-And-Spring-Boot.git
git push origin master

Pushing again:
$ git pull origin master --rebase
$ git push origin master


**************************************************************************************************************
**************************************************************************************************************
Git Repo: https://github.com/in28minutes/full-stack-with-angular-and-spring-boot

Bookmark the Github Repo of the course - https://github.com/in28minutes/full-stack-with-angular-and-spring-boot

https://github.com/in28minutes/full-stack-with-angular-and-spring-boot

README:

Installing Node Js (npm) & Visual Studio Code
Playlist - https://www.youtube.com/playlist?list=PLBBog2r6uMCQN4X3Aa_jM9qVjgMCHMWx6
Steps
Step 01 - Installing NodeJs and NPM - Node Package Manager
Step 02 - Quick Introduction to NPM
Step 03 - Installing Visual Studio Code - Front End Java Script Editor

C:\Users\meesa>node -v
v22.16.0

C:\Users\meesa>npm -v
10.9.2

you can install latest Angular CLI by using this command:
npm install -g @angular/cli
Output:
npm notice To update run: npm install -g npm@11.4.2

I have run: npm install -g npm@11.4.2

ng version
  =>Angular CLI: 20.0.2
	Node: 22.16.0
	Package Manager: npm 11.4.2
	OS: win32 x64

	Angular:
	...

	Package                      Version
	------------------------------------------------------
	@angular-devkit/architect    0.2000.2 (cli-only)
	@angular-devkit/core         20.0.2 (cli-only)
	@angular-devkit/schematics   20.0.2 (cli-only)
	@schematics/angular          20.0.2 (cli-only)

ng help
ng meanse: Angular CLI

ng new todo  (Creating new application)
--------------------------------------------------------------------------------------
Please choose the following options when you execute  ng new todo in the next step:

Which stylesheet format would you like to use? CSS

Do you want to enable Server-Side Rendering (SSR) and Static Site Generation (SSG/Prerendering)? no
---------------------------------------------------------------------------------------------------
cd todo
ng serve (build and run, it is monitoring the code changes like devtools in java)
http://localhost:4200/

ctrl + B (To maximize visual stodio code)

src/index.html  ==> <title>Todo</title>
C:\MJ\Full-Stack-With-Angular-And-Spring-Boot\frontend\todo\src\app\app.html   ==>Actual content of page

Note:
ng lint & ng e2e commands are no longer available
Ignore any failures related to ng lint & ng e2e commands

ng lint (checking coding standard, like new line character at end of file)
There are no TSLint or ESLint rule definition files (such as tslint.json or .eslintrc.json) in your workspace.  This means no custom linting rules are currently defined for your project. If you want to add linting, you would need to create a configuration file such as .eslintrc.json in the root of your workspace.

ng build
It will create "dist" folder in application ==> dist\todo
We can take this "dist\todo" folder and put it behind any web server. We would be able to directly launch "index.html" and run the entirely application.
When we deploy angular application to production, then we would execute "ng build" and we would take this "dist\todo" folder and put it on the web server.

ng test  => run unit test, unit test for angular are written in "Jasmine" framework.
         => we are using "Karma" to run the unit test.
		 => 14 06 2025 18:02:26.916:INFO [karma-server]: Karma v6.4.4 server started at http://localhost:9876/
		 => There is no Karma configuration file (such as karma.conf.js) present in your workspace. If you want to customize Karma's behavior, you would need to add a karma.conf.js file to your project root.
         => C:\MJ\Full-Stack-With-Angular-And-Spring-Boot\frontend\todo\src\app\app.spec.ts  => spec.ts   spec stands for specification in Angular means test case. You can see all test cases here. 

ng e2e  => ng End to End test, it is much more than unit test. e2e test written using a framework "protractor". protractor is a layer around the selenium api. 
        => Your Angular project does not currently have end-to-end (E2E) testing configured. Thatâ€™s why running ng e2e gives the error. There will be e2e folder in project and protractor.conf.js file will be there.

C:\MJ\Full-Stack-With-Angular-And-Spring-Boot\frontend\todo\angular.json => It defineds what should happen when we run specific command. All commands are defined here.

Please make note of the following changes:
Following files are NOT created any more: todo/src/polyfills.ts, todo/src/test.ts, todo/src/browserslist, todo/src/karma.conf.js, todo/src/environments/environment.prod.ts, todo/src/environments/environment.ts, todo/src/app/app-routing.module.ts, todo/e2e/tsconfig.e2e.json, todo/e2e/src/app.e2e-spec.ts, todo/e2e/src/app.po.ts, todo/src/app/app.module.ts
NEW FILES:
app.config.ts : Define the application configuration that instructs Angular on how to assemble the application. As more providers are added, they should be declared here. This configuration file is only generated when using the --standalone option. This setup is added in main.ts, the main entry point of the application.
For more details, please refer https://angular.dev/reference/configs/file-structure#workspace-configuration-files

C:\MJ\Full-Stack-With-Angular-And-Spring-Boot\frontend\todo\src\app => All components and modules will be present in src\app (All angular code)

src\assets => all images
src\environments  => multiple env'schematics, all config for each env's.

C:\MJ\Full-Stack-With-Angular-And-Spring-Boot\frontend\todo\tsconfig.json  => we writes our code in type script but browser will not understand type script. Browser only understand java script. tsconfig.json will convert ts code in js code.

C:\MJ\Full-Stack-With-Angular-And-Spring-Boot\frontend\todo\package.json  => whatever commands we have run like ng test, need a lot of external framworks and tools. All these frameworkd and tools are specified in package.json.
                                                                          => whatever modules/dependencies we have defined in package.json are downloaded in node_modules when we run "npm install"

npm => node package manager is the package manager, we are using. 

node_modules folder =>contains all packages (framworks and tools) to build and run your project.

Whenever we are using "ng new" for creating new project "npm install" will be executed automatically.

C:\MJ\Full-Stack-With-Angular-And-Spring-Boot\frontend\todo\.gitignore  => will ignore files when we commit project to version control.

src\main.ts and src\index.html are loaded up when we launch the angular application. These are responsible for bootstrapping the angular application.

src\test.ts  => starting point for running the unit test, when we run ng test

src\polyfills.ts  ensures that all the code is compatible across all the browser.

src\styles.css  => global css

Angular Component:
Entire page would be divided into number of component. Like in our case: Menu component, List Todos Component and Footer Component.
Each of this components are responsible for displaying the view that basically the HTML, styling: CSS and code to react to the user actions. 
Component ==>1. Template (HTML .component.html)
          ==>2. Style (CSS .component.css) 
		  ==>3. Code (TypeScript .component.ts)
    In application: src\app\app.html, src\app\app.css, src\app\app.ts  
	
src\app\app.ts:
---------------------------------------------------
import { Component } from '@angular/core';
import { RouterOutlet } from '@angular/router';

@Component({
  selector: 'app-root',
  imports: [RouterOutlet],
  templateUrl: './app.html',
  styleUrl: './app.css'
})
export class App {
  protected title = 'todo';
}
---------------------------------------------------

@Component  ==> is decorator, similar to annotations in Java.
selector  ==> attribute, tag name for this component: 'app-root'

we can see:
<body>
  <app-root></app-root>
</body>
in 
src\index.html:
---------------------------
<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>Todo</title>
  <base href="/">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="icon" type="image/x-icon" href="favicon.ico">
</head>
<body>
  <app-root></app-root>
</body>
</html>
----------------------------------

@Component({
  selector: 'app-root',
  imports: [RouterOutlet],
  templateUrl: './app.html',   ==>template url for this specific component
  styleUrl: './app.css'        ==> styling for this specific component
})

  
export class App {
  protected title = 'todo';   ===> As part of our componet code we have some data/member variable. It is mapped to "<h1>Hello, {{ title }}</h1>" in "src\app\app.html"
}

"<h1>Hello, {{ title }}</h1>"  ==> This is Interpolation or Data binding or One way data binding. This is first way of data binding.

Some exercise:
-----------------------------------------
@Component({
  selector: 'app-root',
  imports: [RouterOutlet],
  //templateUrl: './app.html',
  template: '<h1>{{title}}<h1>',    <======
  styleUrl: './app.css'       
})
export class App {
  protected title = 'todo';
}
-------------------------------------------

Creating components/modules/services:
Open another cmd window:
C:\MJ\Full-Stack-With-Angular-And-Spring-Boot\frontend\todo>ng generate component welcome
Or:  ng g c welcome
Please use --skip-import --standalone options when executing the command as shown below:
ng generate component welcome --skip-import --standalone
WHY?
Remember that this is a standalone application (not using NgModules). Therefore, youâ€™ll need to add the extra flags --skip-import and --standalone in the CLI command.

Output:
C:\MJ\Full-Stack-With-Angular-And-Spring-Boot\frontend\todo>ng generate component welcome --skip-import --standalone
CREATE src/app/welcome/welcome.spec.ts (558 bytes)
CREATE src/app/welcome/welcome.ts (200 bytes)
CREATE src/app/welcome/welcome.css (0 bytes)
CREATE src/app/welcome/welcome.html (23 bytes)

Change welcome.ts as: WelcomeComponent
--------------------------------------------------------
import { Component } from '@angular/core';
@Component({
  selector: 'app-welcome',
  imports: [],
  templateUrl: './welcome.html',
  styleUrl: './welcome.css'
})
export class WelcomeComponent  {  <====

}
---------------------------------------------------------

In order to render WelcomeComponent, we need to import in app.ts [CODE CHANGE SHOWN BELOW]:
-------------------------------------------------------------------------------------------
import { Component } from '@angular/core';
import { RouterOutlet } from '@angular/router';
import { WelcomeComponent } from './welcome/welcome'; // Imported
@Component({
selector: 'app-root',
standalone: true, // newly added
imports: [
RouterOutlet,
WelcomeComponent, // Imported
],
templateUrl: './app.component.html',
styleUrl: './app.component.css'
})
export class AppComponent {
title = 'todo';
}
-------------------------------------------------------------------------

Update src\app\app.html as:
-----------------------------------------------------------
<div>
 <h1>Hello, {{ title }}</h1>
      <p>Congratulations! Your app is running. ðŸŽ‰</p>
</div>

<app-welcome></app-welcome>   // newly added


<router-outlet />
----------------------------------------------------------------
app.ts   => It is a module

Standalone Update: Why Angular Standalone Components?
Angular has introduced a novel functionality known as Angular standalone components. These components streamline the process of Angular development and minimize the need for repetitive code. Unlike conventional Angular modules, you DO NOT need to have NgModule files for standalone components. Consequently, you can effortlessly import and utilize them in any section of an application.
Benefits: a)Improved Developer Experience b)Reduced boilerplate c)Increased modularity d)Improved performance
More details here :  https://github.com/in28minutes/full-stack-with-angular-and-spring-boot/blob/master/step-by-step-changes-to-standalone.md#why-angular-standalone-components


In the next step, we will execute a command to create the Login Component. However, there are a few small changes to be careful about!
Important: Before generating the login component, remember that this is a standalone application (not using NgModules). Therefore, youâ€™ll need to add the extra flags --skip-import and --standalone in the CLI command.
Use this command to generate login component:
ng generate component login --skip-import --standalone
Change Login as LoginComponent in src\app\login\login.ts, as by default Login is getting created.
In order to render LoginComponent, we need to import in app.ts
import { Component } from '@angular/core';
import { RouterOutlet } from '@angular/router';
import { WelcomeComponent } from './welcome/welcome.component';
import { LoginComponent } from './login/login'; // Import this
@Component({
selector: 'app-root',
standalone: true,
imports: [
RouterOutlet,
WelcomeComponent,
LoginComponent, // Import this
],
templateUrl: './app.html',
styleUrl: './app.css'
})
export class AppComponent {
title = 'todo';
}
Add <app-login></app-login>  in src\app\app.html (root component)


In the next step, we will implement two-way data binding in login.html.
We need to import FormsModule in the @Component section to make use of two-way data binding.
To use input components and the ngModel feature for two-way data binding in login.html, import FormsModule in the @Component section.
import { Component, OnInit } from '@angular/core';
import { FormsModule } from '@angular/forms'; // Imported
@Component({
selector: 'app-login',
standalone: true,
imports: [
FormsModule, // Added this
],
templateUrl: './login.component.html',
styleUrl: './login.component.css'
})
export class LoginComponent implements OnInit {
}

Second way of data binding is event binding. This is second way of data binding. Basically binding a event on the view.
<button (click)=handleLogin()>Login</button>

ngModel is from import { FormsModule } from '@angular/forms';  
User Name : <input type="text" name="username" [(ngModel)]="username">      ==> This is two direction binding or two way data binding. This is third way of data binding.
[(ngModel)]   ==> generall we call this banana in the box
ngModel   => this is known as angular directive.

Standalone Update: Import NgIf directive
In the next step, make sure you add an import for NgIf.
Why? Standalone components need explicit imports.
Shown below:
import { NgIf } from '@angular/common'; // Added
imports: [NgIf]
-------------------------------------------------------
import { NgIf } from '@angular/common'; // Added 
@Component({
  selector: 'app-login',
  templateUrl: './login.html',
  styleUrls: ['./login.css'],
  standalone: true // Generated - Change
  imports: [NgIf] // Added
})
------------------------------------------------------------------
Complete code here: https://github.com/in28minutes/full-stack-with-angular-and-spring-boot/blob/master/step-by-step-changes-to-standalone.md#after-3

Routing:
Course Updates: use app.routes.ts file instead of app-routing.module.ts
In the next step, we will be implementing routes.
To add Routing, we use app.routes.ts file instead of app-routing.module.ts.
Here is the updated code for app.routes.ts
---------------------------------------------------------------------------
import { TodoComponent } from './todo/todo';
import { RouteGuardService } from './service/route-guard.service';
import { LogoutComponent } from './logout/logout';
import { ListTodosComponent } from './list-todos/list-todos.component';
import { WelcomeComponent } from './welcome/welcome';
import { Routes } from '@angular/router';
import { LoginComponent } from './login/login';
import { ErrorComponent } from './error/error';
// welcome
export const routes: Routes = [
{ path: '', component: LoginComponent },//canActivate, RouteGuardService
{ path: 'login', component: LoginComponent },
{ path: 'welcome/:name', component: WelcomeComponent},
{ path: '**', component: ErrorComponent }
];
------------------------------------------------------------------------------

ng generate component error --skip-import --standalone
C:\MJ\Full-Stack-With-Angular-And-Spring-Boot\frontend\todo>ng generate component error --skip-import --standalone
CREATE src/app/error/error.spec.ts (544 bytes)
CREATE src/app/error/error.ts (192 bytes)
CREATE src/app/error/error.css (0 bytes)
CREATE src/app/error/error.html (21 bytes)

update Error to ErrorComponent in src\app\error\error.ts

Ctrl+Space  => Auto Import

Standalone Update: Add Imports in ListTodosComponent
After creating the ListTodosComponent in next step, do not forget to import the following: NgIf, NgFor, UpperCasePipe, DatePipe
import { NgIf, NgFor, UpperCasePipe, DatePipe } from '@angular/common'; // Added
imports: [NgIf, NgFor, UpperCasePipe, DatePipe] // Added
Complete Code:
----------------------------------------------------------
import { Component, OnInit } from '@angular/core'; 
import { NgIf, NgFor, UpperCasePipe, DatePipe } from '@angular/common'; // Added 
@Component({
    selector: 'app-list-todos',
    templateUrl: './list-todos.html',
    styleUrls: ['./list-todos.css'],
    standalone: true, // Generated - Change
    imports: [NgIf, NgFor, UpperCasePipe, DatePipe] // Added    
})
export class ListTodosComponent implements OnInit { 
  constructor() { } 
  ngOnInit() {
  } 
}
----------------------------------------------------------------------------------

Alaways do "ng serve"
C:\MJ\Full-Stack-With-Angular-And-Spring-Boot\frontend\todo>ng serve
It will always make server up and monitoring for any app code changes like devtools in java

ng generate component listTodos --skip-import --standalone
C:\MJ\Full-Stack-With-Angular-And-Spring-Boot\frontend\todo>ng generate component listTodos --skip-import --standalone
CREATE src/app/list-todos/list-todos.spec.ts (573 bytes)
CREATE src/app/list-todos/list-todos.ts (211 bytes)
CREATE src/app/list-todos/list-todos.css (0 bytes)
CREATE src/app/list-todos/list-todos.html (26 bytes)

C:\MJ\Full-Stack-With-Angular-And-Spring-Boot\frontend\todo>

Linking between welcome page to todos:
Update ListTodos to ListTodosComponent in src\app\list-todos\list-todos.ts
Add routing:  { path: 'todos', component: ListTodosComponent } in src\app\app.routes.ts
Standalone Update: Add Imports in WelcomeComponent
Please add the imports after creating the WelcomeComponent in the next step:
import { NgIf } from '@angular/common'; // Added
import { ActivatedRoute, RouterLink } from '@angular/router'; // Added RouterLink
imports: [RouterLink, NgIf] // Added
Complete code:
import { ActivatedRoute, RouterLink } from '@angular/router'; // Added RouterLink
import { Component } from '@angular/core';
import { NgIf } from '@angular/common'; // Added 
@Component({
  selector: 'app-welcome',
  templateUrl: './welcome.html',
  styleUrls: ['./welcome.css'],
  standalone: true, // Generated - Change
  imports: [RouterLink, NgIf] // Added
})
export class WelcomeComponent implements OnInit {
   constructor() { }
   
   ngOnInit() {
   }
}

Course Updates: DatePipe
In the next step, we will implement a date in angular app. However, there are a few small changes to be careful about!
Add the following DatePipe for implementing date
import { DatePipe, NgFor } from '@angular/common'; // included DatePipe
@Component({
selector: 'app-list-todos',
standalone: true,
imports: [
NgFor,
DatePipe, // Added DatePipe
],
templateUrl: './list-todos.html',
styleUrl: './list-todos.css'
})

ng moduel means angular module.
You can find built in moduel in import of .ts file.
ngModel directive is from FormsModule (@angular/forms)
All components are associated with angular module.
Angular application is group of angular modules.
Each component and each directive are group of angular module or associated with angular module.

Bootstraping of Angular application:
=> root module and root component
 
src\index.html  will be loaded first.  index.html is loading <app-root></app-root> component.
src\main.ts   (parallel file)  It is loading App from './app/app', here app module is root module. src\app\app.ts ==> exporting App component. 'app-root' tag is associated with app.ts
app.ts will show view as app.html
Here App moduel is the root module which gets loaded first. App moduel will load App component.

Angular Application===> Angular Modules ==> Angular Components

                                         Component
										 /   |   \
										/    |    \
								 Template  Style   Code
								 .html     .css    .ts
								 
	
	
Course Updates: Creating Menu and Footer Components
In the next step, we will create Menu and Footer components.
Remember to use --skip-import --standalone flags while creating the components
ng generate component menu --skip-import --standalone
ng generate component footer --skip-import --standalone
Remember to add both MenuComponent and FooterComponent in app.component.ts:
import { Component } from '@angular/core';
import { RouterOutlet } from '@angular/router';
import { MenuComponent } from './menu/menu.component'; // Added Menu
import { FooterComponent } from './footer/footer.component'; // Added Footer
@Component({
selector: 'app-root',
standalone: true,
imports: [
RouterOutlet,
AppComponent,
MenuComponent, // Added Menu
FooterComponent, // Added Footer
],
templateUrl: './app.html',
styleUrl: './app.css'
})
export class AppComponent {
title = 'todo';
}

Upade MenuComponent and FooterComponent in src\app\menu\menu.ts and src\app\footer\footer.ts
Bootstrap is CSS framework
Added @import url(https://unpkg.com/bootstrap@4.1.0/dist/css/bootstrap.min.css)  in src\styles.css

@ not working in footer
@ is NOT working in footer. Please replace it with the ASCII code shown here: &#64;
BEFORE
<span class="text-muted">All Rights Reserved 2018 @in28minutes</span>
AFTER
<span class="text-muted">All Rights Reserved 2024 &#64;in28minutes</span>

Standalone Update: Import routerLink to menu.ts
SNIPPETS
import { RouterLink } from '@angular/router'; // Added
imports: [RouterLink] // Added
frontend/todo/src/app/menu/menu.ts
import { Component, OnInit } from '@angular/core';
import { RouterLink } from '@angular/router'; // Added 
@Component({
    selector: 'app-footer',
    templateUrl: './footer.html',
    styleUrls: ['./footer.css'],
    standalone: true, // Generated - Change
    imports: [RouterLink] // Added
})
export class FooterComponent implements OnInit {
 
  constructor() { }
 
  ngOnInit() {
  }
 
}

href => reload entire page but we are developing single page application. So, we need to use routerLInk in menu.ts
routerLInk => link internal application things withing angular application
href => Entire page gets refreshed, when we are going to external site like <a href="https://www.in28minutes.com" class="navbar-brand">in28minutes</a> then we shuld use href. We don't have any other option.

Course Update - Strict Typing of Parameters and Variables
In recent versions of Angular, strict typing and mandatory initialization is enforced for parameters and variables.
We request you to understand the changes and follow them in the next lectures!
All changes listed here - https://github.com/in28minutes/full-stack-with-angular-and-spring-boot/blob/master/00-02-update-2023-02.md
Here is an example diff between previous and current Angular versions:
/frontend/todo/src/app/service/hardcoded-authentication.service.ts
-  authenticate(username, password) {
+  authenticate(username: string, password: string) {

Authentication Service Component:
ng generate service service/hardcodedAuthentication
C:\MJ\Full-Stack-With-Angular-And-Spring-Boot\frontend\todo>ng generate service service/hardcodedAuthentication
CREATE src/app/service/hardcoded-authentication.spec.ts (423 bytes)
CREATE src/app/service/hardcoded-authentication.ts (154 bytes)

C:\MJ\Full-Stack-With-Angular-And-Spring-Boot\frontend\todo>

@Injectable  => make this as service. Make this component available for dependency injection.

Using Session Storage to Store User Authentication Token:
Session Storage is specific to browser. We can see session storage in inspect->Storage->Application
Remove session storage to test it.


Course Update: hardcodedAuthenticationService
In the next step, we are going to use hardcodedAuthenticationService in menu.html
We cannot access the private variables in a view.
RECOMMENDED
Replace private from the code below in menu.ts
constructor(private hardcodedAuthenticationService 
    : HardcodedAuthenticationService) { }
Code should be
constructor(public hardcodedAuthenticationService 
    : HardcodedAuthenticationService) { }
 
 
Course Update: Creating Logout Component
In the next step, we will create Logout component.
Remember to use --skip-import --standalone flags while creating the component
ng generate component logout --skip-import --standalone
C:\MJ\Full-Stack-With-Angular-And-Spring-Boot\frontend\todo>ng generate component logout --skip-import --standalone
CREATE src/app/logout/logout.spec.ts (551 bytes)
CREATE src/app/logout/logout.ts (196 bytes)
CREATE src/app/logout/logout.css (0 bytes)
CREATE src/app/logout/logout.html (22 bytes)

C:\MJ\Full-Stack-With-Angular-And-Spring-Boot\frontend\todo>
Update Logout to LogoutComponent in src\app\logout\logout.ts
And add LogoutComponent in app.routes.ts file:
import { Routes } from '@angular/router';
import { LoginComponent } from './login/login';
import { WelcomeComponent } from './welcome/welcome';
import { ErrorComponent } from './error/error';
import { ListTodosComponent } from './list-todos/list-todos';
import { LogoutComponent } from './logout/logout'; // Import this
export const routes: Routes = [
{ path: '', component: LoginComponent },
{ path: 'login', component: LoginComponent },
{ path: 'welcome/:name', component: WelcomeComponent },
{ path: 'todos', component: ListTodosComponent },
{ path: 'logout', component: LogoutComponent }, // Add this one
{ path: '**', component: ErrorComponent },
];

Remove session storage to test it.  ==> We need to implement this functionality in logout.

Securing Components using Route Guards:
ng generate service service/routeGuard
C:\MJ\Full-Stack-With-Angular-And-Spring-Boot\frontend\todo>ng generate service service/routeGuard
CREATE src/app/service/route-guard.spec.ts (358 bytes)
CREATE src/app/service/route-guard.ts (141 bytes)

C:\MJ\Full-Stack-With-Angular-And-Spring-Boot\frontend\todo>

Reminder - Course Update - Strict Typing of Parameters and Variables
In recent versions of Angular, strict typing and mandatory initialization is enforced for parameters and variables.
We request you to understand the changes and follow them in the next lectures!
All changes listed here - https://github.com/in28minutes/full-stack-with-angular-and-spring-boot/blob/master/00-02-update-2023-02.md
Here are a couple of diff examples between previous and current Angular versions:
/frontend/todo/src/app/welcome/welcome.ts
 export class WelcomeComponent implements OnInit { 
-  welcomeMessageFromService:string
+  welcomeMessageFromService: string = '' 
-  handleSuccessfulResponse(response){
+  handleSuccessfulResponse(response: any) { 
-  handleErrorResponse(error) {
+  handleErrorResponse(error: any) {
/frontend/todo/src/app/welcome/welcome.ts
 export class WelcomeComponent implements OnInit { 
-  welcomeMessageFromService:string
+  welcomeMessageFromService: string = '' 
-  handleSuccessfulResponse(response){
+  handleSuccessfulResponse(response: any) { 
-  handleErrorResponse(error) {
+  handleErrorResponse(error: any) {
/frontend/todo/src/app/service/data/welcome-data.ts
-  executeHelloWorldServiceWithPathVariable(name) {
+  executeHelloWorldServiceWithPathVariable(name: string) {


*********************************************************************************************************
I have used Eclipse for java.

Project right click + Run as + Maven build + Goal : clean install
Build in progress.
If "Build Path" is not showing when you right-click a project or folder in Eclipse, it usually means one of the following:
Your Project Is Not Recognized as a Java Project : Right-click the project â†’ Configure â†’ Convert to Java Project

Connecting Angular Frontend to Spring Boot Restful Services:

Reminder - Course Update - Strict Typing of Parameters and Variables
In recent versions of Angular, strict typing and mandatory initialization is enforced for parameters and variables.
We request you to understand the changes and follow them in the next lectures!
All changes listed here - https://github.com/in28minutes/full-stack-with-angular-and-spring-boot/blob/master/00-02-update-2023-02.md
Here are a couple of diff examples between previous and current Angular versions:
/frontend/todo/src/app/welcome/welcome.ts
 export class WelcomeComponent implements OnInit { 
-  welcomeMessageFromService:string
+  welcomeMessageFromService: string = '' 
-  handleSuccessfulResponse(response){
+  handleSuccessfulResponse(response: any) { 
-  handleErrorResponse(error) {
+  handleErrorResponse(error: any) {
/frontend/todo/src/app/welcome/welcome.ts
 export class WelcomeComponent implements OnInit { 
-  welcomeMessageFromService:string
+  welcomeMessageFromService: string = '' 
-  handleSuccessfulResponse(response){
+  handleSuccessfulResponse(response: any) { 
-  handleErrorResponse(error) {
+  handleErrorResponse(error: any) {
/frontend/todo/src/app/service/data/welcome-data.ts
-  executeHelloWorldServiceWithPathVariable(name) {
+  executeHelloWorldServiceWithPathVariable(name: string) {

ng generate service service/data/welcomeData
C:\MJ\Full-Stack-With-Angular-And-Spring-Boot\frontend\todo>ng generate service service/data/welcomeData
CREATE src/app/service/data/welcome-data.spec.ts (363 bytes)
CREATE src/app/service/data/welcome-data.ts (142 bytes)

C:\MJ\Full-Stack-With-Angular-And-Spring-Boot\frontend\todo>

Course Update: add HttpClientModule in app.config.ts
There are a few small changes to take of in the next step!
In recent angular versions we need to add HttpClientModule in app.config.ts and use that appConfig in main.ts
AS_IS
import { ApplicationConfig, provideZoneChangeDetection } from '@angular/core';
import { provideRouter } from '@angular/router';
import { routes } from './app.routes';
export const appConfig: ApplicationConfig = {
providers: [provideZoneChangeDetection({ eventCoalescing: true }), provideRouter(routes)]
};
TO_BE
import { FormsModule } from '@angular/forms';
import { BrowserModule } from '@angular/platform-browser';
import { ApplicationConfig, importProvidersFrom } from '@angular/core';
import { provideRouter } from '@angular/router';
import { routes } from './app.routes';
import { provideHttpClient, withInterceptorsFromDi } from '@angular/common/http';
export const appConfig: ApplicationConfig = {
providers: [importProvidersFrom(BrowserModule, FormsModule), provideRouter(routes),
provideHttpClient(withInterceptorsFromDi())]
};


Add 
import { provideHttpClient, withInterceptorsFromDi } from '@angular/common/http';
in src\app\app.config.ts
If we click "Get Welcome Message", we will get "Observable2" in console. And if we clear network log and again clicking "Get Welcome Message" nothing is happening in Network.
Actually here, it is working like synchronously, whole brower is getting stucked and waiting for response from backend server (Java).
So we should call all HTTP services asynchronously. Observable is one of the best approach to implement asynchronous communication.
Angular makes extensive use of Observable as the interface for most of the asynchronous operation.
If you want to make an AJAX request using the HTTP module, angular intern makes use of this Observable.
Check Observable in src\app\service\data\welcome-data.ts and in src\app\welcome\welcome.ts

this.service.executeHelloWorldBeanService().subscribe();//Observable    ==> welcome.ts ==> subscribe() is used for Observable.

If we click "Get Welcome Message" now, we will get error in console like:
---------------------------------------------------------------------------------------
Access to XMLHttpRequest at 'http://localhost:8080/hello-world-bean' from origin 'http://localhost:4200' has been blocked by CORS policy: No 'Access-Control-Allow-Origin' header is present on the requested resource.

welcome.ts:40 GET http://localhost:8080/hello-world-bean net::ERR_FAILED 200 (OK) getWelcomeMessage	@welcome.ts:40 WelcomeComponent_Template_button_click_8_listener @welcome.html:9

welcome.ts:40 ERROR HttpErrorResponse {headers: _HttpHeaders, status: 0, statusText: 'Unknown Error', url: 'http://localhost:8080/hello-world-bean', ok: false, â€¦}
error: ProgressEvent {isTrusted: true, lengthComputable: false, loaded: 0, total: 0, type: 'error', â€¦}
headers:_HttpHeaders {headers: Map(0), normalizedNames: Map(0), lazyInit: undefined, lazyUpdate: null}
message: "Http failure response for http://localhost:8080/hello-world-bean: 0 Unknown Error"
name: "HttpErrorResponse" ok: false status:0 statusText:"Unknown Error" type:undefined url:"http://localhost:8080/hello-world-bean" [[Prototype]]:HttpResponseBase
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
This is the main error:
blocked by CORS policy: No 'Access-Control-Allow-Origin' header is present on the requested resource

In Network tab, we can see after clear network log: request 200 ok but no response

Here we need to tell spring boot(http://localhost:8080/hello-world-bean) that allow angular app ('http://localhost:4200') to access.
so we added: @CrossOrigin(origins="http://localhost:4200")   in /restful-web-services/src/main/java/com/mj/rest/webservices/restfulwebservices/helloworld/HelloWorldController.java

Now we will get no error in console and network because we have subscribe to the observable. Now reqeust is getting executed.
this.service.executeHelloWorldBeanService().subscribe() ==> this is asynchronous call. Means this will not return result.
So we need to define action here.

Add below in src\app\service\data\welcome-data.ts
export class HelloWorldBean {
  constructor(public message: string) { }ng generate service service/data/todoData
}
 return this.http.get<HelloWorldBean>('http://localhost:8080/hello-world-bean'); //Here Generics in Java
Then add below code in src\app\welcome\welcome.ts
this.service.executeHelloWorldBeanService().subscribe(
      response => this.handleSuccessfulResponse(response)
    );
handleSuccessfulResponse(response: any) {
    console.log(response);
    console.log(response.message);
  }
=====> here "response.message"  ==> .message is working because of welcome-data.ts changes.



ng generate service service/data/todoData
C:\MJ\Full-Stack-With-Angular-And-Spring-Boot\frontend\todo>ng generate service service/data/todoData
CREATE src/app/service/data/todo-data.spec.ts (348 bytes)
CREATE src/app/service/data/todo-data.ts (139 bytes)

C:\MJ\Full-Stack-With-Angular-And-Spring-Boot\frontend\todo>


For Update:
ng generate component todo --skip-import --standalone

C:\MJ\Full-Stack-With-Angular-And-Spring-Boot\frontend\todo>ng generate component todo --skip-import --standalone
CREATE src/app/todo/todo.spec.ts (537 bytes)
CREATE src/app/todo/todo.ts (188 bytes)
CREATE src/app/todo/todo.css (0 bytes)
CREATE src/app/todo/todo.html (20 bytes)

C:\MJ\Full-Stack-With-Angular-And-Spring-Boot\frontend\todo>

Update: src\app\app.routes.ts
import { TodoComponent } from './todo/todo';
{ path: 'todos/:id', component: TodoComponent, canActivate:[RouteGuardService] },

Route to specific screen on update click: src\app\list-todos\list-todos.ts

constructor(
    private todoService: TodoDataService,  //Injecting TodaDataService
    private router: Router   //Route to specific screen, Dependency Injection
  ) { }

updateTodo(id: number) {
    console.log(`update todo ${id}`)
    this.router.navigate(['todos', id])   //Route to specific screen.  ==> Name of the route
  }



Implementing Basic Authentication with Spring Boot and Spring Security:
=======================================================================
We need to pass userid and password. But it is not safe, if somebody gets userid and password they can do anything with it. 
That's where we create a temporary token called JWT (Jason Web Token).
Basic security vs JWT 
How JWT is more secure.
We need to add below dependency:
        <dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>
		
If we run : http://localhost:8080/users/mj/todos/1
then browser will take you to the login page. This is login form so this is form based authentication.
defualt user name : user
password you can take it from console.

Once you entered the userId and password, a session cookei is set with form-based authentication.
There is a session for you which is created on server side and a cookie is now registered in your browser. That cookie is sent along with every request.
As long as i am in the same browser and keep opening tabs, all the requests would continue succeeding. This is what is called form based authentication.

We can use Basic Authentication (by providing username and password in REST client: Restlet client ). It's a kind of header details. This is Basic Authentication.

We can use below properties in application.properties to override generated password/default user
spring.security.user.name=in28minutes
spring.security.user.password=dummy

Now if we clicked in UI(call to backend) then we will get below error because of backend authentication.
Access to XMLHttpRequest at 'http://localhost:8080/hello-world/path-variable/mj%20singh' from origin 'http://localhost:4200' has been blocked by CORS policy: No 'Access-Control-Allow-Origin' header is present on the requested resource.

Here we did not supply the basic authentication details along with our request.

Along with the request, we would want to send the basic authentication hearders here.
src\app\service\data\welcome-data.ts
 createBasicAuthenticationHttpHeader() {
    let username = 'mjsingh'
    let password = 'mjsingh'
    let basicAuthHeaderString = 'Basic ' + window.btoa(username + ':' + password); //window.btoa ==> encoding to Window Base64
    return basicAuthHeaderString;
  }
  
  

  executeHelloWorldServiceWithPathVariable(name: string) {

    let basicAuthHeaderString = this.createBasicAuthenticationHttpHeader();
    let headers = new HttpHeaders({
        Authorization: basicAuthHeaderString
      })

    return this.http.get<HelloWorldBean>(
      `http://localhost:8080/hello-world/path-variable/${name}`, {headers}
    );   
  }

Now, we are getting below error.
Access to XMLHttpRequest at 'http://localhost:8080/hello-world/path-variable/mj%20singh' from origin 'http://localhost:4200' has been blocked by CORS policy: Response to preflight request doesn't pass access control check: No 'Access-Control-Allow-Origin' header is present on the requested resource.
Click on Network->Name->Headers
Request URL: http://localhost:8080/hello-world/path-variable/mj%20singh
Request Method: OPTIONS             *************************** <====== *************************
Status Code: 401 Unauthorized
Referrer Policy: strict-origin-when-cross-origin

As soon as we added basic authentication (some kind of authentication), before making http call there is something called options check which is done. This options check is failing right now.



If we hit request to backend through Talend API Tester (Rest Client), but this is failing from frontend.
Because Spring Security authenticate every request.
From front end when you are sending authorization header, first sends something called an options request. And that options request is being denied by Spring Security.
Now we need to configure Spring security to allow options request. For all URL's we would want to automatically allow options request.

Request you to bookmark this page. We will make use of it in the next lecture - https://github.com/in28minutes/full-stack-with-angular-and-spring-boot/blob/master/99-reuse/01-spring-security.md

Add below code:
/restful-web-services/src/main/java/com/mj/rest/webservices/restfulwebservices/basic/auth/SpringSecurityConfigurationBasicAuth.java

A lot of things can go wrong and all of them result in just one exception (Access to XMLHttpRequest at 'URL' from origin 'http://localhost:4200' has been blocked by CORS policy).
Debugging it is NOT easy. However, we wanted to make it easy for you.
Here is a debugging guide to help you - https://github.com/in28minutes/in28minutes-initiatives/blob/master/The-in28Minutes-TroubleshootingGuide-And-FAQ/fullstack.md#basic-authentication-problems

Add below in /restful-web-services/src/main/resources/application.properties:
spring.security.user.name=mjsingh
spring.security.user.password=mjsingh

Now UI and REST call will properly work.
Click on Get Welcome Message, output will come.

But we need this implementation in all component, so HTTP interceptors allow us to do.
This(HTTP interceptors) will enable us to add a specific request header to every request.

ng generate service service/http/HttpIntercepterBasicAuth 

C:\MJ\Full-Stack-With-Angular-And-Spring-Boot\frontend\todo>ng generate service service/http/HttpIntercepterBasicAuth
CREATE src/app/service/http/http-intercepter-basic-auth.spec.ts (430 bytes)
CREATE src/app/service/http/http-intercepter-basic-auth.ts (155 bytes)

C:\MJ\Full-Stack-With-Angular-And-Spring-Boot\frontend\todo>

HttpIntercepterBasicAuth is implementing HttpInterceptor
In this HttpInterceptor we are adding the basic authentication header on top of original request.

Added below code in src\app\service\http\http-intercepter-basic-auth.ts:
export class HttpIntercepterBasicAuth implements HttpInterceptor{
  constructor() { }
  intercept(request: HttpRequest<any>, next: HttpHandler){
     let username = 'mjsingh'
     let password = 'mjsingh'
     let basicAuthHeaderString = 'Basic ' + window.btoa(username + ':' + password);
      request = request.clone({
        setHeaders : {
            Authorization : basicAuthHeaderString
          }
        }) 
    return next.handle(request);
  }
}


Course Update: Adding HttpInterceptor
We have to add HttpInterceptor in app.config.ts file:
import { FormsModule } from '@angular/forms';
import { BrowserModule } from '@angular/platform-browser';
import { ApplicationConfig, importProvidersFrom } from '@angular/core';
import { provideRouter } from '@angular/router';
import { routes } from './app.routes';
import { HTTP_INTERCEPTORS, provideHttpClient, withInterceptorsFromDi } from '@angular/common/http'; // IMPORT
import { HttpIntercepterBasicAuthService } from './service/http/http-intercepter-basic-auth.service'; // IMPORT
export const appConfig: ApplicationConfig = {
providers: [importProvidersFrom(BrowserModule, FormsModule), provideRouter(routes),
{ provide: HTTP_INTERCEPTORS, useClass: HttpIntercepterBasicAuthService, multi: true }, // ADD THIS
provideHttpClient(withInterceptorsFromDi())]
};

Now if we click "Todos", it is coming back properly.
http://localhost:4200/todos

Update/Delete/Add are also working fine.

"Get Welcome Message" is also working fine.

This Basic Authentication is hard coded in Frontend.

Basic Login Authentication is also hard coded in Frontend. We need to connect with Backend.

Create Basic Authentication RESTful Service in Spring Boot.

Added two classes: 
a) /restful-web-services/src/main/java/com/mj/rest/webservices/restfulwebservices/basic/auth/AuthenticationBean.java
b) /restful-web-services/src/main/java/com/mj/rest/webservices/restfulwebservices/basic/auth/BasicAuthenticationController.java

We need to update
C:\MJ\Full-Stack-With-Angular-And-Spring-Boot\frontend\todo\src\app\service\hardcoded-authentication.ts
copy paste "hardcoded-authentication.ts" in same folder location.
Rename as basic-authentication.service.ts
C:\MJ\Full-Stack-With-Angular-And-Spring-Boot\frontend\todo\src\app\service\basic-authentication.service.ts
Rename class as BasicAuthenticationService

We have added below code:
export class BasicAuthenticationService
 {
  constructor(private http: HttpClient) { }
  executeAuthenticationService(username: string, password: string) {
    let basicAuthHeaderString = 'Basic ' + window.btoa(username + ':' + password); //window.btoa ==> encoding to Window Base64 
    let headers = new HttpHeaders({
         Authorization: basicAuthHeaderString
       }) 
     return this.http.get<AuthenticationBean>(
       `http://localhost:8080/basicauth`, {headers}
     );   
  } 
  export class AuthenticationBean {
  constructor(public message: string) { }
}

src\app\login\login.ts   ===> //this is synchronous call, it either returns true or false. 
In case of service call, we would use observable this will be asynchronous call. ==>  `http://localhost:8080/basicauth`, {headers}
so we would need to define the methods to handle both the success and the failure. 
    
	so we define handleBasicAuthLogin in src\app\login\login.ts
	Inject "private basicAuthenticationService: BasicAuthenticationService"  in constructor.

Now we need to connect handleBasicAuthLogin to Login page.
  <!-- <button (click)=handleLogin() class="btn btn-success">Login</button> -->
        <button (click)=handleBasicAuthLogin() class="btn btn-success">Login</button>
		
Now in network, we can see basicauth

This is working because whatever header we are setting is getting overridden by the HTTP interceptor which we created.
We have hard coded userId and password in C:\MJ\Full-Stack-With-Angular-And-Spring-Boot\frontend\todo\src\app\service\http\http-intercepter-basic-auth.ts
and that's overriding whatever stuff that we have put in. This is something you should always be cautious about. Over here we are we are using hard coded thing and that is what is causing a problem.
Now what we'll do is let's disable this HTTP interceptor for a little while. We'll enable it a little later while we get to the rest of the stuff.

// { provide: HTTP_INTERCEPTORS, useClass: HttpIntercepterBasicAuth, multi: true },

in C:\MJ\Full-Stack-With-Angular-And-Spring-Boot\frontend\todo\src\app\app.config.ts
Now login with username = 'mjsingh' password = 'mjsingh'
Now we are validation username/password with backend.

Now we would create basic authentication token.
sessionStorage.setItem('token', basicAuthHeaderString);   added in C:\MJ\Full-Stack-With-Angular-And-Spring-Boot\frontend\todo\src\app\service\basic-authentication.service.ts

Now we can login with mjsingh/mjsingh and "Get Welcome Message" will work but "Todos" will not work. Because we have hardcoded the basic authentication in it. It is not really depending on the intercepter yet.
"Todos" does not work because we have disabled the history interceptor.

We have hard coded below basic header in src\app\service\data\welcome-data.ts before we created http interceptor.
    let basicAuthHeaderString = this.createBasicAuthenticationHttpHeader();
    let headers = new HttpHeaders({
        Authorization: basicAuthHeaderString
      })
	  
	  comment this and header.   //{headers}
	  
comment this too:
createBasicAuthenticationHttpHeader() {
    let username = 'mjsingh'
    let password = 'mjsingh'
    let basicAuthHeaderString = 'Basic ' + window.btoa(username + ':' + password); //window.btoa ==> encoding to Window Base64
    return basicAuthHeaderString;
  }
  
Now "Get Welcome Message" will not work.
private basicAuthenticationService : BasicAuthenticationService    added in constructor of src\app\service\http\http-intercepter-basic-auth.ts
comment this:
  // let username = 'mjsingh'
    //  let password = 'mjsingh'
    //  let basicAuthHeaderString = 'Basic ' + window.btoa(username + ':' + password);
Added below:
let basicAuthHeaderString = this.basicAuthenticationService.getAuthenticatedToken();
    let username = this.basicAuthenticationService.getAuthenticatedUser()
	
Now uncomment // { provide: HTTP_INTERCEPTORS, useClass: HttpIntercepterBasicAuth, multi: true }, in src\app\app.config.ts
All will work now.

Create file : src\app\app.constants.ts
export const API_URL = "http://localhost:8080"

change below: src\app\service\data\todo-data.ts
//return this.http.get<Todo[]>(`http://localhost:8080/users/${username}/todos`);
    return this.http.get<Todo[]>(`${API_URL}/users${username}/todos`);
	
JWT (Json Web Token):
Basic Authentication (we send BASE 64 encoded username and password)=> No Expiration time & No user details
Custom Token System => These token contains user details, user athorization and any other details.
JWT ==> Common token standard.
JWT final token has header, payload and signature. Header contain algorithm for hashing,.

 Configure JWT Authentication
 
 Request you to bookmark this page. We will make use of it in the next lecture - https://github.com/in28minutes/full-stack-with-com.in28minutes.rest.webservices.restfulwebservices.jwtangular-and-spring-boot/blob/master/99-reuse/01-spring-security.md
 
First disable basic authentication in eclipse.
Rename package: com.mj.rest.webservices.restfulwebservices.basic.auth  as com.mj.rest.basic.auth
comment below in /restful-web-services/src/main/resources/application.properties
#spring.security.user.name=mjsingh
#spring.security.user.password=mjsingh

Add url "jwt.get.token.uri=/authenticate"  in application.properties

Add below dependency in pom.xml
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-oauth2-resource-server</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-configuration-processor</artifactId>
        </dependency>
		
Copy com.in28minutes.rest.webservices.restfulwebservices.jwt  from https://github.com/in28minutes/full-stack-with-com.in28minutes.rest.webservices.restfulwebservices.jwtangular-and-spring-boot/blob/master/99-reuse/01-spring-security.md
and paste in src/main/java

my package: com.mj.rest.webservices.restfulwebservices.jwt

I have taken from :https://github.com/in28minutes/full-stack-with-angular-and-spring-boot/tree/master/restful-web-services/src/main/java/com/in28minutes/rest/webservices/restfulwebservices/jwt

I have renamed package com.mj.rest.webservices.restfulwebservices.basic.auth; as package com.mj.rest.basic.auth; ( disabling basic authentication )

Talend API Tester:
POST Method: http://localhost:8080/authenticate
Content-Type: application/json
Origin: http://localhost:4200
POST Body:
{
"username":"mjsingh",
"password":"mjsingh"
}

Response:
{
"token": "eyJraWQiOiJhNzEwODJhZi0zZjM2LTQwOTMtOTg2My0xODVkOGMxMjg2ZWQiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJzZWxmIiwic3ViIjoibWpzaW5naCIsImV4cCI6MTc1MTEyODU2OSwiaWF0IjoxNzUxMTIzMTY5LCJzY29wZSI6IlJPTEVfVVNFUiJ9.Iyx-GY6DdmCMmzvRya727q_fUMJJBm55lpWIoSZ80VNp9qvwP2cfiknuChnsEvcN5nzDGBP_WfQH55N7qS5fzE7-02IsE3jy9JVn-EoBcF_0_Y8e43F19jnxVMJ5wjtjDkpKeI93Y4wPQsNVkvo2GSc0hcEtt9LNKvL0ZXLFwNHpjKvO25SL1RCliDUPd2MWYmY-fRUvCWflTj-uSId0fG0XQGAYEeQzRn5Zmi9EVeo-kbrwRNvAl6pfEucgON0XXBWn3YCOA8VosLRQHwggViP4hKLTKcZ2agg3Hl5ID6AltoP077VCAxl4oipVxpzB1d4GBDtHwxEkZQoAP9-EVQ"
}

Now Hit GET request:
GET: http://localhost:8080/users/mj/todos
Origin : http://localhost:4200
Authorization : Bearer eyJraWQiOiI4MGZkZGRjMi0yMjkzLTQzZDMtYmU3Yy02N2JjNzU5MTUzOGUiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJzZWxmIiwic3ViIjoibWpzaW5naCIsImV4cCI6MTc1MTEzMjA3OCwiaWF0IjoxNzUxMTI2Njc4LCJzY29wZSI6IlJPTEVfVVNFUiJ9.NP7xxpXF9_hgcduR6YhLj3HXQo8TO4VPtebu7rdr91B7lVwzryd7-Fq8xKRkcAImaR13FNj3tiQ_jV6ygYrPYQ4Bvm1gvSkcoMcRI2Yf_HQLK8BqL840Lw1_QCKX_i0e35nruN1ozk8fVEv8oDYuIu4nHacuOXdlCEsjbRYZZNi-2WzYDQVeIDB4oa4vM-evFvKVX7UQm3OJekNNPbWeAD8P8kdu0cevNMm7ywG1HVh-6hKnhRT085uF4FSdBWHjtRX62u4wZ5FAIVAXlLjwHvYofEsgIjxy6p8tynF2J_FqzIYjpfNFHceCDDQrK_Z3WGYA4moeu2b5sc5D18S10w
              : Bearer <token>
			  
We will get response.

In the next lecture, we connect the frontend app to the REST API with JWT.
A lot of things can go wrong.
Debugging it is NOT easy.
However, we wanted to make it easy for you.
Here is a debugging guide to help you - https://github.com/in28minutes/in28minutes-initiatives/blob/master/The-in28Minutes-TroubleshootingGuide-And-FAQ/fullstack.md#jwt-authentication-problems
      
Now if we login in frontend. mjsingh/mjsingh
It will show Invalid Credentials because we have disabled basic authentication.
Now we are using JWT token based authentication.

I have added below code in src\app\service\basic-authentication.service.ts
executeJWTAuthenticationService(username: string, password: string) {
    return this.http.post<any>(
      `${API_URL}/authenticate`, {
      username,
      password
    }).pipe(
      map(
        data => {
          sessionStorage.setItem(AUTHENTICATED_USER, username);
          sessionStorage.setItem(TOKEN, `Bearer ${data.token}`);
          return data;
        }
      )
    );
    //console.log("Execute Hello World Bean Service")
  }
 
 
Added below code in src\app\login\login.html
  <!-- <button (click)=handleLogin() class="btn btn-success">Login</button> -->
        <!-- <button (click)=handleBasicAuthLogin() class="btn btn-success">Login</button> -->
        <button (click)=handleJWTAuthLogin() class="btn btn-success">Login</button>
		
Added below code in src\app\login\login.ts
handleJWTAuthLogin() {
    this.basicAuthenticationService.executeJWTAuthenticationService(this.username, this.password)
        .subscribe(
          data => {
            console.log(data)
            this.router.navigate(['welcome', this.username])
            this.invalidLogin = false
          },
          error => {
            console.log(error)
            this.invalidLogin = true
          }
        )
  }
  
Now login will work as mjsingh/mjsingh

COURSE UPDATE : H2 Database URL
1) H2 database name is randomly generated each time you restart the server.
2) Data Loading from data.sql needs additional configuration

Use this configuration in  application.properties

spring.datasource.url=jdbc:h2:mem:testdb;NON_KEYWORDS=USER
spring.h2.console.enabled=true
spring.data.jpa.repositories.bootstrap-mode=default
spring.jpa.defer-datasource-initialization=true

DEBUGGING GUIDE (If you have problems)
JPA Hibernate Debugging Guide: https://github.com/in28minutes/in28minutes-initiatives/blob/master/The-in28Minutes-TroubleshootingGuide-And-FAQ/jpa-and-hibernate.md
Why do we need to configure bootstrap-mode? Details here - https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-2.3-Release-Notes#bootstrapmode-for-jpa-repositories
Why do we need defer-datasource-initialization? Details here - https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-2.5.0-M3-Release-Notes#hibernate-and-datasql

spring.h2.console.enabled=true
spring.jpa.show-sql=true

open url: http://localhost:8080/h2-console/

Provide JDBC url: jdbc:h2:mem:testdb;NON_KEYWORDS=USER
and click connect.

Right click on src/main/resource  ==> create data.sql file

Add below code in src\app\app.constants.ts
export const TODO_JPA_API_URL = "http://localhost:8080/jpa"

Update src\app\service\data\todo-data.ts
  
   retrieveAllTodos(username: string) {
    //return this.http.get<Todo[]>(`http://localhost:8080/users/${username}/todos`);
    //return this.http.get<Todo[]>(`${API_URL}/users/${username}/todos`);
    return this.http.get<Todo[]>(`${TODO_JPA_API_URL}/users/${username}/todos`);  ===> ${username} is coming from src\app\todo\todo.ts and src\app\list-todos\list-todos.ts  which is "mjsingh". This "mjsingh" username should be same in /restful-web-services/src/main/resources/data.sql
  }

  deleteTodo(username: string, id: number) {
    //return this.http.delete(`http://localhost:8080/users/${username}/todos/${id}`);
    // return this.http.delete(`${API_URL}/users/${username}/todos/${id}`);
    return this.http.delete(`${TODO_JPA_API_URL}/users/${username}/todos/${id}`);
  }

  retrieveTodo(username: string, id: number) {
    //return this.http.get<Todo>(`http://localhost:8080/users/${username}/todos/${id}`);
    //return this.http.get<Todo>(`${API_URL}/users/${username}/todos/${id}`);
     return this.http.get<Todo>(`${TODO_JPA_API_URL}/users/${username}/todos/${id}`);
  }

  updateTodo(username: string, id: number, todo: Todo) {
    //return this.http.put<Todo>(`http://localhost:8080/users/${username}/todos/${id}`, todo);
    //return this.http.put<Todo>(`${API_URL}/users/${username}/todos/${id}`, todo);
    return this.http.put<Todo>(`${TODO_JPA_API_URL}/users/${username}/todos/${id}`, todo);
  }

  createTodo(username: string, todo: Todo) {
    //return this.http.post<Todo>(`http://localhost:8080/users/${username}/todos`, todo);
    //return this.http.post<Todo>(`${API_URL}/${username}/todos`, todo);
    return this.http.post<Todo>(`${TODO_JPA_API_URL}/${username}/todos`, todo);
  }  


Restart frontend and backend both, then try application. Click Logout then click login, then only application will work in my case.

Start from 125


 







	
	

